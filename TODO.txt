TODO: vkCmdPipelineBarrier -> 3 "gpu_..." fns (memory, buffer, image) [only handle 1 barrier at a time for simplicity]
	ex: gpu_cmd_memory_barrier(cmd_buffer, src_stage, dst_state, memory_barrier);
	ex: gpu_cmd_image_barrier(cmd_buffer, src_stage, dst_stage, image_barrier);
	ex: gpu_cmd_buffer_barrier(cmd_buffer, src_stage, dst_stage, buffer_barrier);

NVidia Driver 
March 17th, 2020 - Windows 442.75, Linux 440.66.02
Added support for a new device-local VkMemoryType which is host-coherent and host-visible 

look into VkPhysicalDeviceMemoryBudgetPropertiesEXT

TODO: window.h should probably be app.h, input should live there 
TODO: input should be per-window...
TODO: GPU surface creation should be handled by window.h (abstracted per-platform)


TODO: Still some leaked memory reported by "leaks game" (before our rendering loop) 
		- Create header with custom alloc functions and only use those


TODO: time code for windows (QueryPerformanceCounter)

TODO: Move away from null-terminated strings...
TODO: gltf.h (likely others as well): array sizes should be i32 instead of u32
TODO: window keeps handling messages on MAC after closing (escape properly shuts down)
TODO: Dedicated logging and memory files (Memory: linked memory. Allows freeing grouped allocations with a single call...)
TODO: Helper to copy all data (or some number of elements) from an accessor into a preallocated array...
TODO: Replace all usages with types.h typedefs (floats + ints)

TODO: PerFrameResources (for keeping a per-frame copy of things like uniform buffers...)
TODO: Better Descriptor set management in general. Make it easy to add new uniform buffers independent from existing data
		At the very least, definitely need a separate "GLOBAL" uniform buffer in addition to our per-object buffers

TODO: Reorganize main into a proper game loop, pull out testing logic
